#ifndef INPUTMAPPING_H
#define INPUTMAPPING_H

#include "../utils/psxint.h"
#include <SDL2/SDL_keyboard.h>
#include <SDL2/SDL_mouse.h>

namespace psx {
	enum class KeyCode: i32{
		ALPHA_0 = SDL_SCANCODE_0,	
		ALPHA_1 = SDL_SCANCODE_1,
		ALPHA_2 = SDL_SCANCODE_2,
		ALPHA_3 = SDL_SCANCODE_3,
		ALPHA_4 = SDL_SCANCODE_4,
		ALPHA_5 = SDL_SCANCODE_5,
		ALPHA_6 = SDL_SCANCODE_6,
		ALPHA_7 = SDL_SCANCODE_7,
		ALPHA_8 = SDL_SCANCODE_8,
		ALPHA_9 = SDL_SCANCODE_9,

		A = SDL_SCANCODE_A,
		B = SDL_SCANCODE_B,
		C = SDL_SCANCODE_C,
		D = SDL_SCANCODE_D,
		E = SDL_SCANCODE_E,
		F = SDL_SCANCODE_F,
		G = SDL_SCANCODE_G,
		H = SDL_SCANCODE_H,
		I = SDL_SCANCODE_I,
		J = SDL_SCANCODE_J,
		K = SDL_SCANCODE_K,
		L = SDL_SCANCODE_L,
		M = SDL_SCANCODE_M,
		N = SDL_SCANCODE_N,
		O = SDL_SCANCODE_O,
		P = SDL_SCANCODE_P,
		Q = SDL_SCANCODE_Q,
		R = SDL_SCANCODE_R,
		S = SDL_SCANCODE_S,
		T = SDL_SCANCODE_T,
		U = SDL_SCANCODE_U,
		V = SDL_SCANCODE_V,
		W = SDL_SCANCODE_W,
		X = SDL_SCANCODE_X,
		Y = SDL_SCANCODE_Y,
		Z = SDL_SCANCODE_Z,

		F1	= SDL_SCANCODE_F1,
		F2	= SDL_SCANCODE_F2,
		F3	= SDL_SCANCODE_F3,
		F4	= SDL_SCANCODE_F4,
		F5	= SDL_SCANCODE_F5,
		F6	= SDL_SCANCODE_F6,
		F7	= SDL_SCANCODE_F7,
		F8	= SDL_SCANCODE_F8,
		F9	= SDL_SCANCODE_F9,
		F10	= SDL_SCANCODE_F10,
		F11	= SDL_SCANCODE_F11,
		F12	= SDL_SCANCODE_F12,

		KEYPAD_0		= SDL_SCANCODE_KP_0,
		KEYPAD_1		= SDL_SCANCODE_KP_1,
		KEYPAD_2		= SDL_SCANCODE_KP_2,
		KEYPAD_3		= SDL_SCANCODE_KP_3,
		KEYPAD_4		= SDL_SCANCODE_KP_4,
		KEYPAD_5		= SDL_SCANCODE_KP_5,
		KEYPAD_6		= SDL_SCANCODE_KP_6,
		KEYPAD_7		= SDL_SCANCODE_KP_7,
		KEYPAD_8		= SDL_SCANCODE_KP_8,
		KEYPAD_9		= SDL_SCANCODE_KP_9,
		KEYPAD_ENTER	= SDL_SCANCODE_KP_ENTER,
		KEYPAD_DIVIDE	= SDL_SCANCODE_KP_DIVIDE,
		KEYPAD_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
		KEYPAD_MINUS	= SDL_SCANCODE_KP_MINUS,
		KEYPAD_PLUS		= SDL_SCANCODE_KP_PLUS,

		ESCAPE			= SDL_SCANCODE_ESCAPE,
		/* BACKQUOTE		= SDL_SCANCODE_BACKQUOTE, */
		TAB				= SDL_SCANCODE_TAB,
		CAPSLOCK		= SDL_SCANCODE_CAPSLOCK,
		LSHIFT			= SDL_SCANCODE_LSHIFT,
		LCTRL			= SDL_SCANCODE_LCTRL,
		LGUI			= SDL_SCANCODE_LGUI,
		LALT			= SDL_SCANCODE_LALT,
		SPACE			= SDL_SCANCODE_SPACE,
		RALT			= SDL_SCANCODE_RALT,
		RGUI			= SDL_SCANCODE_RGUI,
		CONTEXT_MENU	= SDL_SCANCODE_APPLICATION,
		RCTRL			= SDL_SCANCODE_RCTRL,
		RSHIFT			= SDL_SCANCODE_RSHIFT,
		ENTER			= SDL_SCANCODE_RETURN,
		BACKSPACE		= SDL_SCANCODE_BACKSPACE,
		DELETE			= SDL_SCANCODE_DELETE,
		INSERT			= SDL_SCANCODE_INSERT,
		COMMA			= SDL_SCANCODE_COMMA,
		PERIOD			= SDL_SCANCODE_PERIOD,
		SLASH			= SDL_SCANCODE_SLASH,
		SEMICOLON		= SDL_SCANCODE_SEMICOLON,
		/* APOSTROPHE		= SDL_SCANCODE_QUOTE, */
		LBRACKET		= SDL_SCANCODE_LEFTBRACKET,
		RBRACKET		= SDL_SCANCODE_RIGHTBRACKET,
		BACKSLASH		= SDL_SCANCODE_BACKSLASH,
		EQUALS			= SDL_SCANCODE_EQUALS,
		MINUS			= SDL_SCANCODE_MINUS,

		UP		= SDL_SCANCODE_UP,
		DOWN	= SDL_SCANCODE_DOWN,
		LEFT	= SDL_SCANCODE_LEFT,
		RIGHT	= SDL_SCANCODE_RIGHT,

		PAUSE		= SDL_SCANCODE_PAUSE,
		PRINTSCREEN = SDL_SCANCODE_PRINTSCREEN,
		HOME		= SDL_SCANCODE_HOME,
		PAGEUP		= SDL_SCANCODE_PAGEUP,
		PAGEDOWN	= SDL_SCANCODE_PAGEDOWN,
		SCROLL_LOCK	= SDL_SCANCODE_SCROLLLOCK,
		END			= SDL_SCANCODE_END,
		NUM_LOCK	= SDL_SCANCODE_NUMLOCKCLEAR

	};

	enum class MouseButton{
		LEFT = SDL_BUTTON_LEFT,
		MIDDLE = SDL_BUTTON_MIDDLE,
		RIGHT = SDL_BUTTON_RIGHT,
		X1 = SDL_BUTTON_X1,
		X2 = SDL_BUTTON_X2
	};
}

#endif

